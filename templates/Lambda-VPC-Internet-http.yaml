AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC, subnets, and a Lambda function that sends a GET request to https://example.com

Resources:
  # Create the VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'MyVPC'

  # Create an Internet Gateway
  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'MyInternetGateway'

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Create a public subnet
  MyPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'MyPublicSubnet'

  # Create a private subnet
  MyPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'MyPrivateSubnet'

  # Create a route table for the public subnet
  MyPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: 'MyPublicRouteTable'

  # Create a route to the Internet Gateway
  MyPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

  # Associate the route table with the public subnet
  PublicRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyPublicRouteTable

  # Create an Elastic IP for the NAT Gateway
  MyElasticIP:
    Type: 'AWS::EC2::EIP'

  # Create a NAT Gateway in the public subnet
  MyNatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref MyPublicSubnet
      AllocationId: !GetAtt MyElasticIP.AllocationId

  # Create a route table for the private subnet
  MyPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: 'MyPrivateRouteTable'

  # Create a route to the NAT Gateway
  MyPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref MyNatGateway

  # Associate the route table with the private subnet
  PrivateRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPrivateSubnet
      RouteTableId: !Ref MyPrivateRouteTable

  # Create a security group for the Lambda function
  MyLambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable Lambda function to access the internet'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'

  # IAM Role for Lambda execution
  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies: 
        - PolicyName: 'LambdaVPCAccessPolicy'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: 'Allow'
                Action: 
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'

  # Lambda Function
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'LambdaInVPC'
      Handler: 'index.handler'
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import requests

          def handler(event, context):
              url = 'https://example.com'
              response = requests.get(url)
              return {
                  'statusCode': response.status_code,
                  'body': json.dumps(response.text)
              }
      Runtime: 'python3.9'
      VpcConfig:
        SecurityGroupIds:
          - !Ref MyLambdaSecurityGroup
        SubnetIds:
          - !Ref MyPrivateSubnet
